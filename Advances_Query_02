## Exercice 1

# Démarrer le shell MongoDB
mongosh

# Créer et utiliser la base de données TitanicDB
use TitanicDB

# Importer les données du fichier CSV dans la collection Passengers
mongoimport --db TitanicDB --collection Passengers --type csv --headerline --file titanic.csv

## Exercice 2

# Compter nombre passagers
db.Passengers.countDocuments()

# Trouver combien de passagers ont survécu
db.Passengers.countDocuments({ Survived: "1" })

# Nombre passagers femmes
db.Passengers.countDocuments({ Sex: "female" })

# 3 enfants
db.Passengers.countDocuments({
  $expr: { $gte: [ { $add: ["$SibSp", "$Parch"] }, 3 ] }
})

## Exercice 3

# Mettre à jour les ports d’embarquement manquants en les remplaçant par "S"
db.Passengers.updateMany(
  { Embarked: { $in: [null, "", " "] } },
  { $set: { Embarked: "S" } }
)

# Ajouter un champ rescued à true pour les passagers qui ont survécu
db.Passengers.updateMany(
  { Survived: "1" },
  { $set: { rescued: true } }
)

## Exercice 4

# Sélectionner les noms des 10 passagers les plus jeunes
db.Passengers.find(
  { Age: { $ne: "" } },
  { Name: 1, Age: 1, _id: 0 }
).sort({ Age: 1 }).limit(10)

# Identifier les passagers qui n'ont pas survécu et qui étaient en 2ème classe
db.Passengers.find(
  { Survived: "0", Pclass: "2" }
)

## Exercice 5

# Supprimer les passagers qui n'ont pas survécu et dont l'âge est inconnu
db.Passengers.deleteMany({
  Survived: "0",
  $or: [ { Age: "" }, { Age: null } ]
})

## Exercice 6

# Augmenter l'âge de tous les passagers de 1 an
db.Passengers.updateMany(
  { Age: { $ne: "" } },
  [ { $set: { Age: { $add: ["$Age", 1] } } } ]
)

## Exercice 7

# Supprimer les passagers sans numéro de billet
db.Passengers.deleteMany({
  $or: [ { Ticket: { $exists: false } }, { Ticket: "" } ]
})
